import { walletGenerator, UserWallets } from './WalletGenerator';

// –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
export class WalletService {
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async createWalletsForNewUser(userId: string, userEmail: string): Promise<UserWallets> {
    try {
      console.log(`üöÄ Creating wallets for new user: ${userEmail} (${userId})`);
      
      const userWallets = await walletGenerator.generateUserWallets(userId);
      
      console.log('‚úÖ All wallets created successfully:');
      console.log(`üìß User: ${userEmail}`);
      console.log(`üÜî User ID: ${userId}`);
      console.log(`üîó TRC-20 (Tron): ${userWallets.wallets.trc20.address}`);
      console.log(`üîó ERC-20 (Ethereum): ${userWallets.wallets.erc20.address}`);
      console.log(`üîó BEP-20 (BSC): ${userWallets.wallets.bep20.address}`);
      console.log(`üîó TON: ${userWallets.wallets.ton.address}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      await this.updateUserWithWallets(userId, userWallets);
      
      return userWallets;
    } catch (error) {
      console.error('‚ùå Failed to create wallets for user:', error);
      throw new Error(`Wallet creation failed: ${error}`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
  static async getUserWallets(userId: string) {
    try {
      return await walletGenerator.getUserWalletsPublic(userId);
    } catch (error) {
      console.error('Failed to get user wallets:', error);
      return null;
    }
  }

  // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  static async regenerateWallets(
    userId: string, 
    adminId: string, 
    networks?: string[]
  ): Promise<UserWallets> {
    try {
      console.log(`üîÑ Admin ${adminId} regenerating wallets for user ${userId}`);
      
      const updatedWallets = await walletGenerator.regenerateUserWallets(
        userId, 
        adminId, 
        networks
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      await this.updateUserWithWallets(userId, updatedWallets);
      
      return updatedWallets;
    } catch (error) {
      console.error('‚ùå Failed to regenerate wallets:', error);
      throw error;
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
  static validateAddress(address: string, network: string): boolean {
    return walletGenerator.validateAddress(address, network);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  static async getPrivateKey(
    userId: string, 
    network: string, 
    adminId: string
  ): Promise<string> {
    try {
      return await walletGenerator.getDecryptedPrivateKey(userId, network, adminId);
    } catch (error) {
      console.error('‚ùå Failed to get private key:', error);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—à–µ–ª—å–∫–∞—Ö
  private static async updateUserWithWallets(userId: string, wallets: UserWallets): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const allUsers = JSON.parse(localStorage.getItem('allUsers') || '{}');
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
      const userEmail = Object.keys(allUsers).find(email => allUsers[email].id === userId);
      
      if (userEmail && allUsers[userEmail]) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—à–µ–ª—å–∫–∞—Ö
        allUsers[userEmail] = {
          ...allUsers[userEmail],
          multiWallets: {
            trc20: wallets.wallets.trc20.address,
            erc20: wallets.wallets.erc20.address,
            bep20: wallets.wallets.bep20.address,
            ton: wallets.wallets.ton.address
          },
          walletsCreatedAt: wallets.createdAt,
          walletsLastRegenerated: wallets.lastRegenerated
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        localStorage.setItem('allUsers', JSON.stringify(allUsers));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        const currentUser = JSON.parse(localStorage.getItem('user') || 'null');
        if (currentUser && currentUser.id === userId) {
          const updatedCurrentUser = {
            ...currentUser,
            multiWallets: allUsers[userEmail].multiWallets,
            walletsCreatedAt: wallets.createdAt,
            walletsLastRegenerated: wallets.lastRegenerated
          };
          localStorage.setItem('user', JSON.stringify(updatedCurrentUser));
        }
        
        console.log(`‚úÖ User ${userEmail} updated with wallet information`);
      }
    } catch (error) {
      console.error('Failed to update user with wallets:', error);
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  static async getWalletStatistics() {
    try {
      const allWallets = JSON.parse(localStorage.getItem('userWallets') || '{}');
      const userCount = Object.keys(allWallets).length;
      
      const networkStats = {
        trc20: 0,
        erc20: 0,
        bep20: 0,
        ton: 0
      };

      Object.values(allWallets).forEach((userWallet: any) => {
        if (userWallet.wallets) {
          Object.keys(networkStats).forEach(network => {
            if (userWallet.wallets[network]) {
              networkStats[network as keyof typeof networkStats]++;
            }
          });
        }
      });

      return {
        totalUsers: userCount,
        networkStats,
        lastGenerated: userCount > 0 ? new Date().toISOString() : null
      };
    } catch (error) {
      console.error('Failed to get wallet statistics:', error);
      return {
        totalUsers: 0,
        networkStats: { trc20: 0, erc20: 0, bep20: 0, ton: 0 },
        lastGenerated: null
      };
    }
  }
}

// –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export const initializeWalletsOnRegistration = async (userId: string, userEmail: string) => {
  try {
    await WalletService.createWalletsForNewUser(userId, userEmail);
  } catch (error) {
    console.error('Failed to initialize wallets on registration:', error);
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  }
};